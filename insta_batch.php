<?php /*	InstaBatch Example.  Inserts most recent tagged 	photos into DB, and displays them from DB.	Ideally the batch inssert does not occur as 	often as the cached data in the DB is viewed 	to reduce API calls an allow users to view 	photos without being logged in to IG.		Requires InstaWrapper.*/$client_id = '20a38d006b4d4f89aa0b0a270afec867';$secret = 'd75869bc791e46e292f195cd346f2390';$redirect_uri = 'http://dev3.circleonemarketing.com/fb_dev/insta_dev/insta_batch.php';$scope = 'comments';require_once('Instagram.php');require_once('InstaBatch.php');$insta = new Instagram(array(	'client_id' => $client_id,	'client_secret' => $secret,	'redirect_uri' => $redirect_uri,));$host = 'localhost';$user = 'dev';$pass = 'Circle203';$db = 'dev';// To use InstaBatch to save retrieved details in DB, set DB details$batch = new Instabatch(array(	'db_server' => $host,	'db_user' => $user,	'db_pass' => $pass,	'db_catalog' => $db,));// To use InstaBatch to save retrieved details in DB, // set only the properties that you want to save$batch->record_fields = array('user','tags','comments','images');// Set the number of records per searched tag to save in DB// if not set, will be unlimited$batch->record_store_count = 5;if(!$insta->isAuthenticated()){	// User needs to login or authenticate	$login_url = $insta->getLoginUrl(array(		'scope' => $scope,	));	header('Location: '.$login_url);}echo '<h1>InstaBatch</h1>';echo '<h2>Information: </h2>';// Show the tokenecho "<br />Access Token: ";print_r($insta->getToken());// Show the user dataecho "<br />User Data: ";print_r($insta->getUserData());// Get some photos with a set tag or "circles" tag$tag = (isset($_GET['tag'])) ? urldecode($_GET['tag']) : 'circles';// Show InstaBatch Actionsecho "<br />InstaBatch will attempt to add the most recent Instagram media objects with tag `$tag`";echo "<br />InstaBatch will record the details of `".implode(', ', $batch->record_fields )."` for `$tag` tagged objects.";$objs = $insta->api('tags/'.$tag.'/media/recent'); $inserted = 0;$prev_stored = 0;foreach($objs->data as $obj){	$created =  date('m/d/Y H:i', $obj->created_time); // Created Date/time	$id = $obj->id; 							// Media ID 	// Use InstaBatch to save retrieved details in DB 	$last_id = $batch->insertItem(array(		'id' => $id,		'created' => date('Y-m-d H:i', strtotime($created)),		'tag' => $tag	));		if($last_id){		$batch->insertItemDetails($last_id,$obj);		++$inserted;	}else{		++$prev_stored;	}}echo "<br />Instabatch Added $inserted records to the DB.";echo "<br />$prev_stored were already in the DB.";// Perform DB Cleanup$batch->batchCleanup($tag);