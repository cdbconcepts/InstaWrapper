<?phpclass Instabatch{		private $db_server;	private $db_user;	private $db_pass;	private $db_catalog;	private $dbh;	public $record_fields;	public $record_store_count = null; // How many records to save in DB;	public function __construct($params)	{		$dsn = 'mysql:dbname='.$params['db_catalog'].';host='.$params['db_server'];		try {			$this->dbh = new PDO($dsn, $params['db_user'], $params['db_pass']);		} catch (PDOException $e) {			die( 'Connection failed: ' . $e->getMessage() );		}	}		public function insertItem($data)	{			if($this->mediaExists($data['id'])) return null;				$tag_id = $this->tagExists($data['tag']);		if(!$tag_id){			// Insert tag lookup row			$tag_id = $this->insertTag($data['tag']);		}			$sql = "INSERT INTO InstagramBatch (tag_id, media_id, created_dt) VALUES (?, ?, ?)";		$q = $this->dbh->prepare($sql);		$q->execute(array($tag_id, $data['id'],$data['created']));		$id = $this->dbh->lastInsertId();				return $id; 	}		public function mediaExists($id)	{		$sth = $this->dbh->prepare("SELECT count(*) as cnt FROM InstagramBatch WHERE media_id = ?");		$sth->execute(array($id));		$res = $sth->fetchAll();		return $res[0]['cnt'];	}		public function tagExists($tag)	{		$sth = $this->dbh->prepare("SELECT id FROM InstagramBatchTag WHERE tag = ?");		$sth->execute(array($tag));		$res = $sth->fetchAll();		if(empty($res)) return null;		return $res[0]['id'];	}		public function insertTag($tag)	{			echo "inserting tag $tag";		$sql = "INSERT INTO InstagramBatchTag (tag) VALUES (?)";		$q = $this->dbh->prepare($sql);		$q->execute(array($tag));		return $this->dbh->lastInsertId(); 	}		public function insertItemDetails($id, $obj)	{			foreach($this->record_fields as $field){			$this->insertItemDetail(array(				'id'=>$id,				'name'=> $field ,				'value'=> serialize($obj->$field),			));		}	}	public function insertItemDetail($data)	{			$sql = "INSERT INTO InstagramBatchDetail (instagram_batch_id, data_name, data_value) VALUES (?, ?, ?)";		$q = $this->dbh->prepare($sql);		$q->execute(array($data['id'],$data['name'],$data['value'],));		return $this->dbh->lastInsertId(); 	}		public function getItems($tag, $limit = null,$offset = null,$sort = null)	{		if(!$tag) return null;			$tag_id = $this->tagExists($tag);		if(!$tag_id) return null;			$sth = $this->dbh->prepare("SELECT * FROM InstagramBatch WHERE tag_id = ? ORDER BY created_dt DESC");		$sth->setFetchMode(PDO::FETCH_ASSOC);		$sth->execute(array($tag_id));		$res = $sth->fetchAll();		if(empty($res)) return null;		$record = array();		foreach($res as $r){			$id = $r['id'];			$s = array();			$s['id'] = $id;			$s['data'] = $this->getItemDetails($id);			$s['created'] = $r['created_dt'];			$record[] = $s;		}		return $record;	}		public function getItemDetails($id)	{		$sth = $this->dbh->prepare("SELECT * FROM InstagramBatchDetail WHERE instagram_batch_id = ?");		$sth->setFetchMode(PDO::FETCH_ASSOC);		$sth->execute(array($id));		$res = $sth->fetchAll();		$detail = array();		foreach($res as $r){			$name = $r['data_name'];			$value = unserialize($r['data_value']);			$detail[$name] = $value;		}		return $detail;	}		public function batchCleanup($tag){		// Deletes all except `$record_store_count` most recent tags				if (!$this->record_store_count) return null;		$save = $this->record_store_count;				$tag_id = $this->tagExists($tag);		if(!$tag_id) return null;			// Find all rows that are not in the `$record_store_count newest` for requested tag		$sth = $this->dbh->prepare("SELECT id FROM InstagramBatch WHERE tag_id = ? ORDER BY created_dt ASC LIMIT $save, 18446744073709551615");		$sth->setFetchMode(PDO::FETCH_ASSOC);		$sth->execute(array($tag_id));		$res = $sth->fetchAll();		$ids = array();		foreach($res as $r){			$ids[] = $r['id'];		}		$ids = implode(',',$ids);				// Delete all rows except `$record_store_count` newest		$sth = $this->dbh->prepare("DELETE FROM InstagramBatch WHERE tag_id = ? AND id IN ($ids)");		$del = $sth->execute(array($tag_id));				// Delete respective detail rows		$sth = $this->dbh->prepare("DELETE FROM InstagramBatchDetail WHERE instagram_batch_id IN ($ids)");		$del = $sth->execute();		return $del;			}}	?>